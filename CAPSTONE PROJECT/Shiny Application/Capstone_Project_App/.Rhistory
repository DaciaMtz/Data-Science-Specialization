# Load necessary libraries
library(caret)
install.packages("caret")
# Load necessary libraries
library(caret)
# Load necessary libraries
library(caret)
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
library("caTools", lib.loc="C:/Users/Admin/anaconda3/envs/rstudio/lib/R/library")
detach("package:caTools", unload=TRUE)
install.packages(c("caret", "ggplot2", "lattice"))
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("caret")
# Load necessary libraries
library(caret)
library(randomForest)
library(e1071)
library(gbm)
# Load Data
library(readr)
training <- read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- read_csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
# Preprocess data (remove unnecessary columns, handle missing values)
# Check the number of NA values in each column
na_counts <- colSums(is.na(training))
# Print the number of NAs for each column
na_counts
training <- training[, -c(1, 2, 3, 4, 5)]  # Remove non-predictive columns like timestamps, IDs
training <- training[, colSums(is.na(training)) == 0]  # Remove columns with NAs
# Convert the target variable "classe" to factor
training$classe <- as.factor(training$classe)
# Preprocess data (remove unnecessary columns, handle missing values)
training <- training[, -c(1, 2, 3, 4, 5)]  # Remove non-predictive columns like timestamps, IDs
training <- training[, colSums(is.na(training)) == 0]  # Remove columns with NAs
# Check the number of NA values in each column
na_counts <- colSums(is.na(training))
# Print the number of NAs for each column
na_counts
# Convert the target variable "classe" to factor
training$classe <- as.factor(training$classe)
# Set seed for reproducibility
set.seed(123)
# Set up cross-validation
train_control <- trainControl(method = "cv", number = 5)
# Train a random forest model
rf_model <- train(classe ~ ., data = training, method = "rf", trControl = train_control)
# Set seed for reproducibility
set.seed(123)
# Set up cross-validation
train_control <- trainControl(method = "cv", number = 5, savePredictions = TRUE)
# Train a random forest model
rf_model <- train(classe ~ ., data = training, method = "rf", trControl = train_control)
# Evaluate the model performance
# Evaluate model accuracy
print(rf_model)
# Confusion matrices for each fold
conf_matrices <- lapply(split(model$pred, model$pred$Resample), function(fold) {
confusionMatrix(factor(fold$pred), factor(fold$obs))
})
# Evaluate the model performance
# Evaluate model accuracy
print(rf_model)
# Confusion matrices for each fold
conf_matrices <- lapply(split(rf_model$pred, rf_model$pred$Resample), function(fold) {
confusionMatrix(factor(fold$pred), factor(fold$obs))
})
# Print confusion matrices for each fold
conf_matrices
# Aggregate predictions
all_preds <- rf_model$pred
# Overall confusion matrix
overall_conf_matrix <- confusionMatrix(factor(all_preds$pred), factor(all_preds$obs))
print(overall_conf_matrix)
# Set seed for reproducibility
set.seed(123)
# Set up cross-validation
train_control <- trainControl(method = "cv", number = 5, savePredictions = TRUE)
# Train a random forest model
rf_model <- train(classe ~ ., data = training, method = "rf", trControl = train_control)
# Evaluate the model performance
# Evaluate model accuracy
print(rf_model)
# Confusion matrices for each fold
conf_matrices <- lapply(split(rf_model$pred, rf_model$pred$Resample), function(fold) {
confusionMatrix(factor(fold$pred), factor(fold$obs))
})
# Print confusion matrices for each fold
conf_matrices
# Aggregate predictions
all_preds <- rf_model$pred
# Overall confusion matrix
overall_conf_matrix <- confusionMatrix(factor(all_preds$pred), factor(all_preds$obs))
print(overall_conf_matrix)
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
# Load the mtcars dataset
data(mtcars)
# Create the scatter plot with color based on the number of Cylinders
fig <- plot_ly(
data = mtcars,
x = ~hp,
y = ~mpg,
color = ~factor(cyl),  # Color by number of cylinders
colors = c("blue", "green", "red"),  # Assign colors to cylinders
type = 'scatter',
mode = 'markers',
marker = list(size = 10, opacity = 0.8)
) %>%
layout(
title = "Horsepower vs. Miles per Gallon by Number of Cylinders",
xaxis = list(title = "Horsepower (hp)"),
yaxis = list(title = "Miles per Gallon (mpg)"),
legend = list(title = list(text = "Cylinders"))
)
fig
library(plotly)
# Load the mtcars dataset
data(mtcars)
# Create the scatter plot with color based on the number of Cylinders
fig <- plot_ly(
data = mtcars,
x = ~hp,
y = ~mpg,
color = ~factor(cyl),  # Color by number of cylinders
colors = c("blue", "green", "red"),  # Assign colors to cylinders
type = 'scatter',
mode = 'markers',
marker = list(size = 10, opacity = 0.8)
) %>%
layout(
title = "Horsepower vs. Miles per Gallon by Number of Cylinders",
xaxis = list(title = "Horsepower (hp)"),
yaxis = list(title = "Miles per Gallon (mpg)"),
legend = list(title = list(text = "Cylinders"))
)
fig
library(plotly)
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
# Load the mtcars dataset
data(mtcars)
# Create the scatter plot with color based on the number of Cylinders
fig <- plot_ly(
data = mtcars,
x = ~hp,
y = ~mpg,
color = ~factor(cyl),  # Color by number of cylinders
colors = c("blue", "green", "red"),  # Assign colors to cylinders
type = 'scatter',
mode = 'markers',
marker = list(size = 10, opacity = 0.8)
) %>%
layout(
title = "Horsepower vs. Miles per Gallon by Number of Cylinders",
xaxis = list(title = "Horsepower (hp)"),
yaxis = list(title = "Miles per Gallon (mpg)"),
legend = list(title = list(text = "Cylinders"))
)
fig
library(plotly)
# Load the mtcars dataset
data(mtcars)
# Create the scatter plot with color based on the number of Cylinders
fig <- plot_ly(
data = mtcars,
x = ~hp,
y = ~mpg,
color = ~factor(cyl),  # Color by number of cylinders
colors = c("blue", "green", "red"),  # Assign colors to cylinders
type = 'scatter',
mode = 'markers',
marker = list(size = 10, opacity = 0.8)
) %>%
layout(
title = "Horsepower vs. Miles per Gallon by Number of Cylinders",
xaxis = list(title = "Horsepower (hp)"),
yaxis = list(title = "Miles per Gallon (mpg)"),
legend = list(title = list(text = "Cylinders"))
)
fig
shiny::runApp('GitHub/Data-Science-Specialization/CAPSTONE PROJECT/Shiny Application/Capstone_Project_App')
setwd("~/GitHub/Data-Science-Specialization/CAPSTONE PROJECT/Shiny Application/Capstone_Project_App")
deploy()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
